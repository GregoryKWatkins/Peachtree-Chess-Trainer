import Authenticate from "./Authenticate"
import * as Config from "./AWS/config"

const Database = {

    /*
     *  Assign multiple modules to a curriculum.
     *
     *  moduleIds is an array of moduleId Strings.
     *
     *  curriculumId is a String denoting the curriculum to assign the modules.
     *  If the modules should be unassigned to all curriculums, curriculumId should be null.
     */
    assignModules(onSuccess, onFailure, moduleIds, curriculumId = null) {

      var params = {
        Modules: moduleIds,
        Curriculum: curriculumId
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/assignmodules', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Edit prices for various cases unrelated to individual curriculums.
     *
     *  Any combination of the following information can be edited a single call:
     *    renewClass_price: a String denoting the price of renewing an existing class for one year (example: "$50.00").
     *    createClass_price: a String denoting the price of creating a new class (example: "$50.00").
     *    expandClass_price: a String denoting the price of expanding the capacity of a class (example: "$10.00").
     *
     *  If certain information should remain unchanged, its corresponding parameter should be set to "null".
     */
    editPricingOptions(onSuccess, onFailure, renewClass_price = null, createClass_price = null, expandClass_price = null) {

      var params = {
        RenewClass: renewClass_price,
        CreateClass: createClass_price,
        ExpandClass: expandClass_price
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/editpricingoptions', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Delete the curriculum identified by moduleId.
     *
     *  Any modules assigned to the deleted curriculum will be unassigned.
     *
     *  curriculumId is a String.
     */
    deleteCurriculum(curriculumId, onSuccess, onFailure) {

      var params = {
        CurrId: curriculumId
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/deletecurriculum', {
        method: 'DELETE',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Create a new curriculum.
     *
     *  color, description, name, piece, and price optional parameters.
     *  Leaving out description, name, piece, or price will use default values.
     *  Leaving out color will use a random approved color from the database.
     *
     *  The new curriculum's id will be auto-generated by the server and returned as part of onSuccess.
     *
     *  New curriculums are unpublished by default.
     */
    createCurriculum(onSuccess, onFailure, color = '#EFABFF', description = "This is a new Curriculum.", name = "NEW UNNAMED CURRICULUM", piece = "w_pawn", price = "$0.00") {

      var params = {
        Color: color,
        Description: description,
        Name: name,
        Piece: piece,
        Price: price
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/createcurriculum', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Edit various information about a curriculum.
     *
     *  Any combination of the following information can be edited a single call:
     *    new_Color: a String denoting the color to display on the curriculum's card in hexcode (example: "#A5FFD6").
     *    new_Description: a String denoting the description of the curriculum (example: "This is a description.").
     *    new_Name: a String denoting the readable name of the curriculum (NOT the curriculum's ID, which cannot be changed) (example: "A Curriculum Name").
     *    new_Piece: a String denoting the chess piece to display on the curriculum's card (example: "w_pawn")
     *    new_Price: a String denoting the price of the curriculum (example: "$60.00")
     *    new_Published: a Boolean denoting the published status of the curriculum (example: false)
     *
     *  If certain information should remain unchanged, its corresponding parameter should be set to "null".
     *
     *  A curriculum's modules cannot be changed through this method. Use editModule() instead.
     */
    editCurriculum(curriculumId, onSuccess, onFailure, new_Color = null, new_Description = null, new_Name = null, new_Piece = null, new_Price = null, new_Published = null) {

      var params = {
        CurrId: curriculumId,
        Color: new_Color,
        Description: new_Description,
        Name: new_Name,
        Piece: new_Piece,
        Price: new_Price,
        Published: new_Published
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/editcurriculum', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Create a new module.
     *
     *  name and order are optional parameters: leaving them out will use default values.
     *
     *  By default, the new module will not be assigned to any curriculum. It can be assigned
     *  via editModule().
     *
     *  The new module's id will be auto-generated by the server and returned as part of onSuccess.
     */
    createModule(onSuccess, onFailure, name = "A New Module", order = 1) {

      var params = {
        Name: name,
        Order: order
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/createmodule', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Delete the module identified by moduleId.
     *  Also deletes any uploaded images and coach resources
     *  associated with the module.
     *
     *  moduleId is a String.
     */
    deleteModule(moduleId, onSuccess, onFailure) {

      var params = {
        ModuleId: moduleId
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/deletemodule', {
        method: 'DELETE',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Edit various information about a module.
     *
     *  Any combination of the following information can be edited a single call:
     *    new_Curriculum: a String denoting the curriculum ID that the module belongs to (example: "beginner1")
     *                        To unassign the module from all curriculums, new_Curriculum should be set the an empty String
     *    new_Name: a String denoting the display name of the module (NOT the module's ID, which cannot be changed) (example: "A Class Name").
     *    new_Order: an Integer denoting the unlock/progression order of this module within its curriculum (example: 4).
     *
     *  If certain information should remain unchanged, its corresponding parameter should be set to "null".
     *
     *  A module's assignments cannot be changed through this method. Use updateAssignment() instead.
     */
    editModule(moduleId, onSuccess, onFailure, new_Curriculum = null, new_Name = null, new_Order = null) {

      var params = {
        ModuleId: moduleId,
        Curriculum: new_Curriculum,
        Name: new_Name,
        Order: new_Order
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/editmodule', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Delete the assignment identified by assignmentNumber
     *  from the module identified by moduleId.
     *
     *  assignmentNumber is a number, moduleId is a String.
     */
    deleteAssignment(assignmentNumber, moduleId, onSuccess, onFailure) {

      var params = {
        AssignmentNumber: assignmentNumber,
        ModuleId: moduleId
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/deleteassignment', {
        method: 'DELETE',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Delete an coach resource from the website, if it exists.
     *  deleteFileName is a String specifying the name of the File
     *  to be deleted without the file extension.
     */
    deleteResource(deleteFileName, moduleId, onSuccess, onFailure) {

      var params = {
        DeleteFileName: deleteFileName,
        ModuleId: moduleId
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/deleteresource', {
        method: 'DELETE',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Retrieve links to all coach resources for a particular moduleId.
     *  onSuccess will return an array of Strings containing links to the resources.
     */
    getModuleResources(moduleId, onSuccess, onFailure) {

      var params = {
        ModuleId: moduleId
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/getresources', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          if (data.Data.length === 0) {
            onFailure("Specified moduleId had no resources.");
          } else {
            for (var i = 0; i < data.Data.length; i++) {
              data.Data[i] = Config.resourceURL + data.Data[i];
            }
            onSuccess(data.Data);
          }
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Upload a coach resource to the website. Only accepts .pdf files.
     *  uploadFile is a File object.
     *  moduleId will be used to associate the resource with a particular module.
     *
     *  File names are not validated: uploading a file with the same name as another
     *  will overwrite the existing file.
     */
    uploadResource(uploadFile, moduleId, onSuccess, onFailure) {

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/uploadresource?ModuleId=' + moduleId +"&filename=" + uploadFile.name, {
        method: 'PUT',
        body: uploadFile,
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Marks the specified assignment as completed in the database
     *  for the currently logged in user.
     *  If all assignments in the module are marked as completed,
     *  also marks the module itself as completed.
     *
     *  If the assignment was completed as part of a class, set the classCode
     *  parameter. If the assignment was completed as part of an individual curriculum,
     *  mark classCode as null (or leave the parameter out entirely).
     */
    assignmentCompleted(moduleId, assignmentNumber, onSuccess, onFailure, classCode = null) {
      var params = {
        Username: Authenticate.getCurrentUser().username,
        ModuleId: moduleId,
        AssignmentNumber: assignmentNumber,
        ClassCode: classCode
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/assignmentcompleted', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Adds the assignmentJSON to the module specified by moduleId,
     *  or updates the assignment if it already exists.
     *  Assignments are identified by their "assignment_number" in their assignmentJSON.
     */
    updateAssignment(assignmentJSON, moduleId, onSuccess, onFailure) {
      var params = {
        AssignmentJSON: assignmentJSON,
        ModuleId: moduleId
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/updateassignment', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Delete an image from the website, if it exists.
     *  deleteFileName is a String specifying the name of the File
     *  to be deleted without the file extension.
     */
    deleteImage(deleteFileName, onSuccess, onFailure) {

      var params = {
        DeleteFileName: deleteFileName
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/deleteimage', {
        method: 'DELETE',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    /*
     *  Upload an image to the website. Only accepts .jpg and .png files.
     *  uploadFile is a File object, and newFileName is a String specifying
     *  the new name of the File without the file extension
     *  (file extension will be retrieved and appended by server).
     */
    uploadImage(uploadFile, newFileName, onSuccess, onFailure) {

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/uploadimage?filename=' + newFileName, {
        method: 'PUT',
        body: uploadFile,
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });

    },

    // uploadTest(fileToUpload, onSuccess, onFailure) {

    //   fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/uploadtest?filename=' + fileToUpload.name, {
    //     method: 'PUT',
    //     body: fileToUpload,
    //     headers: {
    //         Authorization: Authenticate.getToken()
    //     },
    //   }).then(function(response) {
    //     return response.json();
    //   }).then(function(data) {
    //     if (data.Status === "Success") {
    //       onSuccess(data);
    //     } else {
    //       onFailure(data.Error);
    //     }
    //   });
    // },

    /*
     *  Retrieve the content for an individual module.
     */
    getModuleContent(moduleId, onSuccess, onFailure) {

      var params = {
        ModuleId: moduleId
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/modulecontent', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Retrieve information for all modules.
     *
     *  This function will NOT return the moduleString for each module (the part that actually encodes the module's content),
     *  since it is so long. Call the function "getModuleContent(moduleId)" to retrieve the content for an individual module.
     */
    getAllModules(onSuccess, onFailure) {

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/allmodules', {
        method: 'GET',
        contentType: 'application/json',
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Retrieve information for all curriculums, as well as the ids of their member modules.
     */
    getAllCurriculums(onSuccess, onFailure) {

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/allcurriculums', {
        method: 'GET',
        contentType: 'application/json',
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Retrieve the PayPal key from the database.
     */
    getPayPalKey(onSuccess, onFailure) {

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/paypalkey', {
        method: 'GET',
        contentType: 'application/json'
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Replace the stored PayPal key in the database.
     */
    updatePayPalKey(newKey, onSuccess, onFailure) {
      var params = {
        UserPoolId: Config.userPoolId,
        Username: Authenticate.getCurrentUser().username,
        Key: newKey
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/paypalkey', {
        method: 'PUT',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Kick members of a class.
     *  Also erases all progress data of the kicked users.
     *
     *  Can be called by any of a class's coaches, but cannot
     *  kick themself or the class owner.
     *
     *  membersToKick is an array containing usernames.
     */
    kickMembers(classCode, membersToKick, onSuccess, onFailure) {
      var params = {
        ClassCode: classCode,
        MembersToKick: membersToKick,
        Username: Authenticate.getCurrentUser().username
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/classkickmembers', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Retrieve the notifications for the currently logged in user.
     *
     *  Returned notifications are the most recent announcements of the user's classes,
     *  as well as announcements targeted for the specific user or to all users.
     *
     *  limit is the maximum number of notifications that will be returned.
     *
     *  onFailure is called if there are no notifications for the user.
     */
    getUserNotifications(onSuccess, onFailure, limit = 20) {
      var params = {
        Username: Authenticate.getCurrentUser().username,
        Limit: limit
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/usernotifications', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Retrieve the announcements for a class.
     *
     *  onFailure is called if there are no announcements for the requested class.
     */
    getClassAnnouncements(classCode, onSuccess, onFailure) {
      var params = {
        ClassCode: classCode
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/classannouncements', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Post an announcement in a class as the currently logged in user.
     *  Only succeeds if the current user is a coach of the specified class.
     *  If posting the announcement will exceed the maximum number allowed,
     *  the class's oldest annoucement will be deleted.
     */
    createAnnouncement(classCode, message, onSuccess, onFailure) {
      var params = {
        ClassCode: classCode,
        Username: Authenticate.getCurrentUser().username,
        Message: message
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/createannouncement', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Change the assigned members of a single module for a class.
     *  membersArr should be an array (NOT a string!) of the member usernames.
     */
    setModuleMembers(classCode, moduleId, membersArr, onSuccess, onFailure) {
      var params = {
        ClassCode: classCode,
        ModuleId: moduleId,
        Members: membersArr
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/setmodulemembers', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Change the release/due date of EVERY module in a class.
     *  Only use this method if you can provide the full scheduleJSON object
     *  in the same format as it is returned in "Schedule" field of getClassPageInfo.
     */
    rescheduleAll(classCode, scheduleJSON, onSuccess, onFailure) {
      var params = {
        ClassCode: classCode,
        Schedule: JSON.stringify(scheduleJSON)
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/rescheduleallmodules', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Change the release/due date of a single module for a class.
     *  dueDate and releaseDate should be strings containing a valid ISO string.
     */
    rescheduleModule(classCode, moduleId, releaseDate, dueDate, onSuccess, onFailure) {
      var params = {
        ClassCode: classCode,
        ModuleId: moduleId,
        ReleaseDate: releaseDate,
        DueDate: dueDate
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/reschedulemodule', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Kick every member of a class (other than the coach that created it).
     *  Also erases all progress data of the class.
     *
     *  Can only be called by the class owner.
     */
    kickAllMembers(classCode, onSuccess, onFailure) {
      var params = {
        ClassCode: classCode,
        Username: Authenticate.getCurrentUser().username
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/classkickallmembers', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Converts a date string from the database to what should display in the UI
     */
    getReadableDate(time) {
        var date = new Date(time)
        if (date.toString() === "Invalid Date") {
            return null
        }

        const dateOptions = {
            weekday: "long",
            year: "numeric",
            month: 'long',
            day: 'numeric'
        }

        const timeOptions = {
            hour: "2-digit",
            minute: "2-digit"
        }
        var dateString = date.toLocaleString(undefined, dateOptions);
        var timeString = date.toLocaleString(undefined, timeOptions);

        return dateString + " at " + timeString
    },

    /*
     *  Get the information for an individual curriculum, including module information and the
     *  currently logged in user's progress
     */
    getCurriculumPageInfo(currId, onSuccess, onFailure) {

      var params = {
        CurrId: currId,
        Username: Authenticate.getCurrentUser().username
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/coursepageinfo', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Get the information for a class, including module information.
     */
    getClassPageInfo(classCode, onSuccess, onFailure) {

      var params = {
        ClassCode: classCode,
        Username: Authenticate.getCurrentUser().username
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/classpageinfo', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Change the display name of a class. Currently logged in user must be the class's owner.
     */
    changeClassName(classCode, className, onSuccess, onFailure) {

      var params = {
        ClassCode: classCode,
        Coach: Authenticate.getCurrentUser().username,
        ClassName: className
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/changeclassname', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Expand the maximum capacity of the requested class.
     */
    expandClassSize(classCode, onSuccess, onFailure) {

      var params = {
        ClassCode: classCode
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/expandclasssize', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Renew the requested class.
     */
    renewClass(classCode, onSuccess, onFailure) {

      var params = {
        ClassCode: classCode
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/renewclass', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Create a new class, adding the specified user as the class's coach.
     */
    createClass(coachUsername, onSuccess, onFailure) {

      var params = {
        Username: coachUsername
      };

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/createclass', {
        method: 'POST',
        contentType: 'application/json',
        body: JSON.stringify(params),
        headers: {
            Authorization: Authenticate.getToken()
        },
      }).then(function(response) {
        return response.json();
      }).then(function(data) {
        if (data.Status === "Success") {
          onSuccess(data.Message);
        } else {
          onFailure(data.Error);
        }
      });
    },

    /*
     *  Get pricing page info for a user not logged in.
     */
    getAnonymousPricingInfo(onSuccess, onFailure) {
      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/pricingpage', {
          method: 'GET',
          contentType: 'application/json'
        }).then(function(response) {
          return response.json();
        }).then(function(data) {
          if (data.Status === "Success") {
            onSuccess(data);
          } else {
            onFailure(data.Error);
          }
        });
    },

    /*
     *  Get pricing information from the Pricing database. Can be called without
     *  being logged in.
     *
     */
    getPricingInfo(onSuccess, onFailure) {

      fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/pricinginfo', {
          method: 'GET',
          contentType: 'application/json'
        }).then(function(response) {
          return response.json();
        }).then(function(data) {
          if (data.Status === "Success") {
            onSuccess(data.Data);
          } else {
            onFailure(data.Error);
          }
        });
    },

    /*
     *  Add current user to a new course.
     */
    addCourse(courseId, onSuccess, onFailure) {

      var currUser = Authenticate.getCurrentUser();
      if (currUser) {

        var params = {
          Username: currUser.username,
          Course: courseId
        };

        fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/addcourse', {
          method: 'POST',
          contentType: 'application/json',
          body: JSON.stringify(params),
          headers: {
              Authorization: Authenticate.getToken()
          },
        }).then(function(response) {
          return response.json();
        }).then(function(data) {
          if (data.Status === "Success") {
            onSuccess(data.Message);
          } else {
            onFailure(data.Error);
          }
        });
      } else {
        alert("User is not logged in.");
      }
    },

    /*
     *  Join a classroom using an entered code.
     */
    joinClass(code, onSuccess, onFailure) {

      var currUser = Authenticate.getCurrentUser();
      if (currUser) {
        if (code === null || code.trim() === "") {
          alert("Code cannot be blank.");
          return;
        }

        var params = {
          Username: currUser.username,
          Code: code
        };

        fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/joinclassviacode', {
          method: 'POST',
          contentType: 'application/json',
          body: JSON.stringify(params),
          headers: {
              Authorization: Authenticate.getToken()
          },
        }).then(function(response) {
          return response.json();
        }).then(function(data) {
          if (data.Status === "Success") {
            onSuccess(data.Message);
          } else {
            onFailure(data.Error);
          }
        });
      } else {
        alert("User is not logged in.");
      }
    },

    /*
     *  Retrieve all class information for the current user.
     */
    // getCurriculums(onSuccess, onFailure) {

    //   var currUser = Authenticate.getCurrentUser();
    //   var username = null;
    //   if (currUser) {
    //     username = currUser.username;
    //   }

    //   var params = {
    //     Username: username
    //   };

    //   fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/classes', {
    //     method: 'POST',
    //     contentType: 'application/json',
    //     body: JSON.stringify(params),
    //   }).then(function(response) {
    //     return response.json();
    //   }).then(function(data) {
    //     if (data.Status === "Success") {
    //       onSuccess(data);
    //     } else {
    //       onFailure(data.Error);
    //     }
    //   });
    // },

    /*
     *  Retrieve all curriculum information.
     *  Calling this method while logged in returns additional information (whether or not each
     *  curriculum has been purchased by the user), but can also be called without being logged in.
     */
    // getCurriculums(onSuccess, onFailure) {

    //   var currUser = Authenticate.getCurrentUser();
    //   var username = null;
    //   if (currUser) {
    //     username = currUser.username;
    //   }

    //   var params = {
    //     Username: username
    //   };

    //   fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/curriculums', {
    //     method: 'POST',
    //     contentType: 'application/json',
    //     body: JSON.stringify(params),
    //   }).then(function(response) {
    //     return response.json();
    //   }).then(function(data) {
    //     if (data.Status === "Success") {
    //       onSuccess(data);
    //     } else {
    //       onFailure(data.Error);
    //     }
    //   });
    // },

    /*
     *  Retrieve all of the user homepage info for the currently logged in user.
     */
    getUserHomepageInfo(onSuccess, onFailure) {
      var username = Authenticate.getCurrentUser().username;
      if (username) {
        var params = {
          Username: username,
          UserPoolId: Config.userPoolId
        };

        fetch('https://jgmysjlzii.execute-api.us-east-2.amazonaws.com/prod/userhomepageinfo', {
          method: 'POST',
          body: JSON.stringify(params),
          contentType: 'application/json',
          headers: {
              Authorization: Authenticate.getToken()
          },
        }).then(function(response) {
          return response.json();
        }).then(function(data) {
          if (data.Status === "Success") {
            onSuccess(data);
          } else {
            onFailure(data.Error);
          }
        });
      } else {
        console.log("Current user could not be found.");
      }

    },

};

export default Database;